# Production Docker Compose Configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  k-scan:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Python Configuration
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      
      # Production settings
      - DEBUG=false
      - API_RELOAD=false
      # Security: Don't expose internal details
      - API_HOST=0.0.0.0
    volumes:
      # Remove source code mount for production
      - k-scan-data:/app/data
    restart: always
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Health check with longer intervals for production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Labels for production monitoring
    labels:
      - "com.k-scan.environment=production"
      - "traefik.enable=true"
      - "traefik.http.routers.k-scan.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.k-scan.tls=true"
      - "traefik.http.routers.k-scan.tls.certresolver=letsencrypt"

  # Production PostgreSQL (recommended over SQLite for production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=k_scan
      - POSTGRES_USER=k_scan_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    # Security hardening
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U k_scan_user -d k_scan"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k-scan-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k-scan-network

  # Reverse proxy (optional - uncomment if using Traefik)
  # traefik:
  #   image: traefik:v2.10
  #   command:
  #     - "--api.dashboard=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
  #     - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
  #     - "--certificatesresolvers.letsencrypt.acme.email=your-email@domain.com"
  #     - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "letsencrypt:/letsencrypt"
  #   restart: always

volumes:
  k-scan-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  # letsencrypt:
  #   driver: local

networks:
  k-scan-network:
    driver: bridge 